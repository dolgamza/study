package kr.co.dw.util;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.Date;
import java.sql.NClob;
import java.sql.ParameterMetaData;
import java.sql.PreparedStatement;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.StringTokenizer;


/**
 * Wrapper Class For PreparedStatement
 * 
 * <pre>
 * 
 * 1. Overview
 * 
 *    PreparedStatement의 쿼리 및 파라미터값을 로그로 남기기 위해 PreparedStatement를 확장한 클래스.
 * 
 * 2. Usage
 * 
 *    public Vector<EmployeeEntity> getList(int intPage) {
 *      Connection                conn = ConnectionMgr.getInstance().getConnetion();
 *      WrapPreparedStatementUtil ps   = null;
 *      ResultSet                 rs   = null;
 *      Vector<EmployeeEntity>    vo   = new Vector<EmployeeEntity>();
 *      try {
 *        ps = new WrapPreparedStatementUtil(conn, "EXEC GET_EMPLOYEE_LIST_PROC ?");
 *        ps.setInt(1, intPage);
 *        rs = ps.executeQuery();
 *        while(rs.next()) {
 *          EmployeeEntity ent = new EmployeeEntity();
 *          ent.EMPLOYEENO = rs.getInt(   "EMPLOYEENO");
 *          ent.NAME       = rs.getString("NAME"      );
 *          vo.add(ent);
 *        }
 *        Logger logger = Logger.getLogger(this.getClass());
 *        logger.error(ps.getQueryString());
 *      } catch (Exception e) {
 *        //
 *      } finally {
 *        ConnectionMgr.getInstance().closeConnection(conn, ps, rs);
 *      }
 *      return vo;
 *    }
 * 
 * </pre>
 * 
 *
 */
public class WrapPreparedStatementUtil implements PreparedStatement {
	
	private String strQuery;
	private ArrayList<String> arrParams;
	private PreparedStatement ps;

	/**
	 * Constructor Of Wrapper Class For PreparedStatement
	 * 
	 * @param conn
	 * @param str
	 * @throws SQLException
	 */
	public WrapPreparedStatementUtil(Connection conn, String str) throws SQLException {
		ps        = conn.prepareStatement(str);
		strQuery  = str;
		arrParams = new ArrayList<String>();
	}

	/**
	 * Set Parameters
	 * 
	 * @param intPos idx
	 * @param obj    Object
	 */
	private void setParams(int intPos, Object obj) {
		String str;
		if (obj instanceof String || obj instanceof Date) {
				str = "'" + obj + "'";
		} else {
			str = (obj == null) ? null : obj.toString();
		}

		while (intPos >= arrParams.size()) {
				arrParams.add(null);
		}
		arrParams.set(intPos, str);
	}
	
	/**
	 * Get Query For Logger.
	 * 
	 * @return bf.toString().trim()
	 */
	public String getQueryString() {
		StringBuffer    bf                 = new StringBuffer();
		int             intQuestionMarkCnt = 0;
		StringTokenizer t                  = new StringTokenizer(strQuery +" ", "?");
		while (t.hasMoreTokens()) {
			bf.append(t.nextToken());
			try {
				Object o;
				if (arrParams.size() > 1 + intQuestionMarkCnt) {
					o = arrParams.get(1 + intQuestionMarkCnt++);
				} else {
					o = (t.hasMoreTokens()) ? null : "";
				}
				bf.append("" + o);
			} catch (Throwable e) {
				bf.append("Error Get Query For Logger. Because " + e.toString());
			}
		}
		return bf.toString().trim();
	}
	
	/**************************** Override ****************************/
	
	@Override
	public void addBatch(String sql) throws SQLException {
		ps.addBatch(sql);
	}

	@Override
	public void cancel() throws SQLException {
		ps.cancel();
		
	}

	@Override
	public void clearBatch() throws SQLException {
		ps.clearBatch();
	}

	@Override
	public void clearWarnings() throws SQLException {
		ps.clearWarnings();
	}

	@Override
	public void close() throws SQLException {
		ps.close();
	}

	@Override
	public boolean execute(String sql) throws SQLException {
		return ps.execute(sql);
	}

	@Override
	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		return ps.execute(sql, autoGeneratedKeys);
	}

	@Override
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		return ps.execute(sql, columnIndexes);
	}

	@Override
	public boolean execute(String sql, String[] columnNames) throws SQLException {
		return ps.execute(sql, columnNames);
	}

	@Override
	public int[] executeBatch() throws SQLException {
		return ps.executeBatch();
	}

	@Override
	public ResultSet executeQuery(String sql) throws SQLException {
		return ps.executeQuery(sql);
	}

	@Override
	public int executeUpdate(String sql) throws SQLException {
		return ps.executeUpdate(sql);
	}

	@Override
	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		return ps.executeUpdate(sql, autoGeneratedKeys);
	}

	@Override
	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		return ps.executeUpdate(sql, columnIndexes);
	}

	@Override
	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		return ps.executeUpdate(sql, columnNames);
	}

	@Override
	public Connection getConnection() throws SQLException {
		return ps.getConnection();
	}

	@Override
	public int getFetchDirection() throws SQLException {
		return ps.getFetchDirection();
	}

	@Override
	public int getFetchSize() throws SQLException {
		return ps.getFetchSize();
	}

	@Override
	public ResultSet getGeneratedKeys() throws SQLException {
		return ps.getGeneratedKeys();
	}

	@Override
	public int getMaxFieldSize() throws SQLException {
		return ps.getMaxFieldSize();
	}

	@Override
	public int getMaxRows() throws SQLException {
		return ps.getMaxRows();
	}

	@Override
	public boolean getMoreResults() throws SQLException {
		return ps.getMoreResults();
	}

	@Override
	public boolean getMoreResults(int current) throws SQLException {
		return ps.getMoreResults(current);
	}

	@Override
	public int getQueryTimeout() throws SQLException {
		return ps.getQueryTimeout();
	}

	@Override
	public ResultSet getResultSet() throws SQLException {
		return ps.getResultSet();
	}

	@Override
	public int getResultSetConcurrency() throws SQLException {
		return ps.getResultSetConcurrency();
	}

	@Override
	public int getResultSetHoldability() throws SQLException {
		return ps.getResultSetHoldability();
	}

	@Override
	public int getResultSetType() throws SQLException {
		return ps.getResultSetType();
	}

	@Override
	public int getUpdateCount() throws SQLException {
		return ps.getUpdateCount();
	}

	@Override
	public SQLWarning getWarnings() throws SQLException {
		return ps.getWarnings();
	}

	@Override
	public boolean isClosed() throws SQLException {
		return ps.isClosed();
	}

	@Override
	public boolean isPoolable() throws SQLException {
		return ps.isPoolable();
	}

	@Override
	public void setCursorName(String name) throws SQLException {
		ps.setCursorName(name);
	}

	@Override
	public void setEscapeProcessing(boolean enable) throws SQLException {
		ps.setEscapeProcessing(enable);
	}

	@Override
	public void setFetchDirection(int direction) throws SQLException {
		ps.setFetchDirection(direction);
	}

	@Override
	public void setFetchSize(int rows) throws SQLException {
		ps.setFetchSize(rows);
	}

	@Override
	public void setMaxFieldSize(int max) throws SQLException {
		ps.setMaxFieldSize(max);
	}

	@Override
	public void setMaxRows(int max) throws SQLException {
		ps.setMaxRows(max);
		
	}

	@Override
	public void setPoolable(boolean poolable) throws SQLException {
		ps.setPoolable(poolable);
	}

	@Override
	public void setQueryTimeout(int seconds) throws SQLException {
		ps.setQueryTimeout(seconds);
	}

	@Override
	public boolean isWrapperFor(Class<?> arg0) throws SQLException {
		return ps.isWrapperFor(arg0);
	}

	@Override
	public <T> T unwrap(Class<T> arg0) throws SQLException {
		return ps.unwrap(arg0);
	}

	@Override
	public void addBatch() throws SQLException {
		ps.addBatch();
	}

	@Override
	public void clearParameters() throws SQLException {
		ps.clearParameters();
	}

	@Override
	public boolean execute() throws SQLException {
		return ps.execute();
	}

	@Override
	public ResultSet executeQuery() throws SQLException {
		return ps.executeQuery();
	}

	@Override
	public int executeUpdate() throws SQLException {
		return ps.executeUpdate();
	}

	@Override
	public ResultSetMetaData getMetaData() throws SQLException {
		return ps.getMetaData();
	}

	@Override
	public ParameterMetaData getParameterMetaData() throws SQLException {
		return ps.getParameterMetaData();
	}

	@Override
	public void setArray(int arg0, Array arg1) throws SQLException {
		ps.setArray(arg0, arg1);
		this.setParams(arg0, arg1);
	}

	@Override
	public void setAsciiStream(int arg0, InputStream arg1) throws SQLException {
		ps.setAsciiStream(arg0, arg1);
		this.setParams(arg0, arg1);
	}

	@Override
	public void setAsciiStream(int arg0, InputStream arg1, int arg2) throws SQLException {
		ps.setAsciiStream(arg0, arg1, arg2);
		this.setParams(arg0, arg1);
	}

	@Override
	public void setAsciiStream(int arg0, InputStream arg1, long arg2) throws SQLException {
		ps.setAsciiStream(arg0, arg1, arg2);
		this.setParams(arg0, arg1);
	}

	@Override
	public void setBigDecimal(int arg0, BigDecimal arg1) throws SQLException {
		ps.setBigDecimal(arg0, arg1);
		this.setParams(arg0, arg1);
	}

	@Override
	public void setBinaryStream(int arg0, InputStream arg1) throws SQLException {
		ps.setBinaryStream(arg0, arg1);
		this.setParams(arg0, arg1);
	}

	@Override
	public void setBinaryStream(int arg0, InputStream arg1, int arg2) throws SQLException {
		ps.setBinaryStream(arg0, arg1, arg2);
		this.setParams(arg0, arg1);
	}

	@Override
	public void setBinaryStream(int arg0, InputStream arg1, long arg2) throws SQLException {
		ps.setBinaryStream(arg0, arg1, arg2);
		this.setParams(arg0, arg1);
	}

	@Override
	public void setBlob(int arg0, Blob arg1) throws SQLException {
		ps.setBlob(arg0, arg1);
		this.setParams(arg0, arg1);
	}

	@Override
	public void setBlob(int arg0, InputStream arg1) throws SQLException {
		ps.setBlob(arg0, arg1);
		this.setParams(arg0, arg1);
	}

	@Override
	public void setBlob(int arg0, InputStream arg1, long arg2) throws SQLException {
		ps.setBlob(arg0, arg1, arg2);
		this.setParams(arg0, arg1);
	}

	@Override
	public void setBoolean(int arg0, boolean arg1) throws SQLException {
		ps.setBoolean(arg0, arg1);
		this.setParams(arg0, arg1);
	}

	@Override
	public void setByte(int arg0, byte arg1) throws SQLException {
		ps.setByte(arg0, arg1);
		this.setParams(arg0, arg1);
	}

	@Override
	public void setBytes(int arg0, byte[] arg1) throws SQLException {
		ps.setBytes(arg0, arg1);
		this.setParams(arg0, arg1);
	}

	@Override
	public void setCharacterStream(int arg0, Reader arg1) throws SQLException {
		ps.setCharacterStream(arg0, arg1);
		this.setParams(arg0, arg1);
	}

	@Override
	public void setCharacterStream(int arg0, Reader arg1, int arg2) throws SQLException {
		ps.setCharacterStream(arg0, arg1, arg2);
		this.setParams(arg0, arg1);
	}

	@Override
	public void setCharacterStream(int arg0, Reader arg1, long arg2) throws SQLException {
		ps.setCharacterStream(arg0, arg1, arg2);
		this.setParams(arg0, arg1);	
	}

	@Override
	public void setClob(int arg0, Clob arg1) throws SQLException {
		ps.setClob(arg0, arg1);
		this.setParams(arg0, arg1);	
	}

	@Override
	public void setClob(int arg0, Reader arg1) throws SQLException {
		ps.setClob(arg0, arg1);
		this.setParams(arg0, arg1);	
	}

	@Override
	public void setClob(int arg0, Reader arg1, long arg2) throws SQLException {
		ps.setClob(arg0, arg1, arg2);
		this.setParams(arg0, arg1);	
	}

	@Override
	public void setDate(int arg0, Date arg1) throws SQLException {
		ps.setDate(arg0, arg1);
		this.setParams(arg0, arg1);	
	}

	@Override
	public void setDate(int arg0, Date arg1, Calendar arg2) throws SQLException {
		ps.setDate(arg0, arg1, arg2);
		this.setParams(arg0, arg1);	
	}

	@Override
	public void setDouble(int arg0, double arg1) throws SQLException {
		ps.setDouble(arg0, arg1);
		this.setParams(arg0, arg1);	
	}

	@Override
	public void setFloat(int arg0, float arg1) throws SQLException {
		ps.setFloat(arg0, arg1);
		this.setParams(arg0, arg1);	
	}

	@Override
	public void setInt(int arg0, int arg1) throws SQLException {
		ps.setInt(arg0, arg1);
		this.setParams(arg0, arg1);	
	}

	@Override
	public void setLong(int arg0, long arg1) throws SQLException {
		ps.setLong(arg0, arg1);
		this.setParams(arg0, arg1);	
	}

	@Override
	public void setNCharacterStream(int arg0, Reader arg1) throws SQLException {
		ps.setNCharacterStream(arg0, arg1);
		this.setParams(arg0, arg1);	
	}

	@Override
	public void setNCharacterStream(int arg0, Reader arg1, long arg2) throws SQLException {
		ps.setNCharacterStream(arg0, arg1, arg2);
		this.setParams(arg0, arg1);	
	}

	@Override
	public void setNClob(int arg0, NClob arg1) throws SQLException {
		ps.setNClob(arg0, arg1);
		this.setParams(arg0, arg1);	
	}

	@Override
	public void setNClob(int arg0, Reader arg1) throws SQLException {
		ps.setNClob(arg0, arg1);
		this.setParams(arg0, arg1);	
	}

	@Override
	public void setNClob(int arg0, Reader arg1, long arg2) throws SQLException {
		ps.setNClob(arg0, arg1, arg2);
		this.setParams(arg0, arg1);	
	}

	@Override
	public void setNString(int arg0, String arg1) throws SQLException {
		ps.setNString(arg0, arg1);
		this.setParams(arg0, arg1);	
	}

	@Override
	public void setNull(int arg0, int arg1) throws SQLException {
		ps.setNull(arg0, arg1);
		this.setParams(arg0, arg1);
	}

	@Override
	public void setNull(int arg0, int arg1, String arg2) throws SQLException {
		ps.setNull(arg0, arg1, arg2);
		this.setParams(arg0, arg1);
	}

	@Override
	public void setObject(int arg0, Object arg1) throws SQLException {
		ps.setObject(arg0, arg1);
		this.setParams(arg0, arg1);
	}

	@Override
	public void setObject(int arg0, Object arg1, int arg2) throws SQLException {
		ps.setObject(arg0, arg1, arg2);
		this.setParams(arg0, arg1);
	}

	@Override
	public void setObject(int arg0, Object arg1, int arg2, int arg3) throws SQLException {
		ps.setObject(arg0, arg1, arg2, arg3);
		this.setParams(arg0, arg1);
	}

	@Override
	public void setRef(int arg0, Ref arg1) throws SQLException {
		ps.setRef(arg0, arg1);
		this.setParams(arg0, arg1);
	}

	@Override
	public void setRowId(int arg0, RowId arg1) throws SQLException {
		ps.setRowId(arg0, arg1);
		this.setParams(arg0, arg1);
	}

	@Override
	public void setSQLXML(int arg0, SQLXML arg1) throws SQLException {
		ps.setSQLXML(arg0, arg1);
		this.setParams(arg0, arg1);
	}

	@Override
	public void setShort(int arg0, short arg1) throws SQLException {
		ps.setShort(arg0, arg1);
		this.setParams(arg0, arg1);
	}

	@Override
	public void setString(int arg0, String arg1) throws SQLException {
		ps.setString(arg0, arg1);
		this.setParams(arg0, arg1);
	}

	@Override
	public void setTime(int arg0, Time arg1) throws SQLException {
		ps.setTime(arg0, arg1);
		this.setParams(arg0, arg1);
	}

	@Override
	public void setTime(int arg0, Time arg1, Calendar arg2) throws SQLException {
		ps.setTime(arg0, arg1, arg2);
		this.setParams(arg0, arg1);
	}

	@Override
	public void setTimestamp(int arg0, Timestamp arg1) throws SQLException {
		ps.setTimestamp(arg0, arg1);
		this.setParams(arg0, arg1);
	}

	@Override
	public void setTimestamp(int arg0, Timestamp arg1, Calendar arg2) throws SQLException {
		ps.setTimestamp(arg0, arg1, arg2);
		this.setParams(arg0, arg1);
	}

	@Override
	public void setURL(int arg0, URL arg1) throws SQLException {
		ps.setURL(arg0, arg1);
		this.setParams(arg0, arg1);
	}

	@Override
	public void setUnicodeStream(int arg0, InputStream arg1, int arg2) throws SQLException {
		// This is deprecated
		// ps.setUnicodeStream(arg0, arg1, arg2);
		// this.setParams(arg0, arg1);
	}

	@Override
	public void closeOnCompletion() throws SQLException {
		// 
		
	}

	@Override
	public boolean isCloseOnCompletion() throws SQLException {
		return false;
	}
	
}
